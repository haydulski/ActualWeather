{"version":3,"sources":["components/Weather.js","components/App.js","serviceWorker.js","index.js"],"names":["Weather","props","react_default","a","createElement","className","data","id","temp","press","wind","App","state","city1","city2","city3","_this2","this","_loop","i","currentCity","console","log","fetch","concat","then","response","ok","Error","json","newcity","main","pressure","speed","setState","catch","err","length","Fragment","src_components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAceA,SAZC,SAAAC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMK,KAAKC,GAA3B,KACAL,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMK,KAAKE,KAA9B,UACAN,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMK,KAAKG,MAA3B,QACAP,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMK,KAAKI,KAA7B,WCmEGC,oNAtEbC,MAAQ,CACNC,MAAO,CAAEN,GAAI,SAAUC,KAAM,IAAKC,MAAO,OAAQC,KAAM,MACvDI,MAAO,CAAEP,GAAI,SAAUC,KAAM,GAAIC,MAAO,GAAIC,KAAM,IAClDK,MAAO,CAAER,GAAI,SAAUC,KAAM,GAAIC,MAAO,GAAIC,KAAM,wFAIlD,IADkB,IAAAM,EAAAC,KAAAC,EAAA,SACTC,GAEP,IAAIC,EAAcJ,EAAKJ,MAAMC,MAAMN,GACzB,IAANY,IAASC,EAAcJ,EAAKJ,MAAME,MAAMP,IAClC,IAANY,IAASC,EAAcJ,EAAKJ,MAAMG,MAAMR,IAE5Cc,QAAQC,IAAIF,GACZG,MAAK,oDAAAC,OAAqDJ,EAArD,WAAAI,OAhBI,mCAgBJ,kBACFC,KAAK,SAAAC,GACJ,GAAIA,EAASC,GAAM,OAAOD,EAC1B,MAAME,MAAM,2BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAnB,GACJ,GAAU,IAANa,EAAS,CACX,IAAIW,EAAUd,EAAKJ,MAAMC,MACzBiB,EAAQtB,KAAOF,EAAKyB,KAAKvB,KACzBsB,EAAQrB,MAAQH,EAAKyB,KAAKC,SAC1BF,EAAQpB,KAAOJ,EAAKI,KAAKuB,MAEzBjB,EAAKkB,SAAS,CACZrB,MAAOiB,IAGX,GAAU,IAANX,EAAS,CACX,IAAIW,EAAUd,EAAKJ,MAAME,MACzBgB,EAAQtB,KAAOF,EAAKyB,KAAKvB,KACzBsB,EAAQrB,MAAQH,EAAKyB,KAAKC,SAC1BF,EAAQpB,KAAOJ,EAAKI,KAAKuB,MAEzBjB,EAAKkB,SAAS,CACZpB,MAAOgB,IAGX,GAAU,IAANX,EAAS,CACX,IAAIW,EAAUd,EAAKJ,MAAMG,MACzBe,EAAQtB,KAAOF,EAAKyB,KAAKvB,KACzBsB,EAAQrB,MAAQH,EAAKyB,KAAKC,SAC1BF,EAAQpB,KAAOJ,EAAKI,KAAKuB,MAEzBjB,EAAKkB,SAAS,CACZnB,MAAOe,OAIZK,MAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,MA7CrBjB,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAnBC,oCAkDT,OADAE,QAAQC,IAAIL,KAAKL,MAAMyB,QAErBnC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmC,SAAA,KACEpC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,CAASjC,KAAMW,KAAKL,MAAMC,QAC1BX,EAAAC,EAAAC,cAACmC,EAAD,CAASjC,KAAMW,KAAKL,MAAME,QAC1BZ,EAAAC,EAAAC,cAACmC,EAAD,CAASjC,KAAMW,KAAKL,MAAMG,iBAhElByB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ7C,EAAAC,EAAAC,cAAE4C,EAAF,MAAYC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.677ea002.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Weather.css'\r\nconst Weather = props => {\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <h1>Weather in {props.data.id}:</h1>\r\n            <div>Temperature: {props.data.temp} &#176;C</div>\r\n            <div>Pressure: {props.data.press} hPa</div>\r\n            <div>Wind speed: {props.data.wind} m/s</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather","import React, { Component } from 'react';\nimport Weather from './Weather'\nimport './App.css';\n\nconst apiKey = 'a971a0d5904a806c8727838afc5882c5'\nclass App extends Component {\n  state = {\n    city1: { id: \"London\", temp: \"5\", press: \"1005\", wind: \"10\" },\n    city2: { id: \"Berlin\", temp: \"\", press: \"\", wind: \"\" },\n    city3: { id: \"Warsaw\", temp: \"\", press: \"\", wind: \"\" },\n\n  }\n  componentDidMount() {\n    for (let i = 0; i < 3; i++) {\n\n      let currentCity = this.state.city1.id;\n      if (i === 1) currentCity = this.state.city2.id;\n      if (i === 2) currentCity = this.state.city3.id;\n\n      console.log(currentCity);\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${currentCity}&APPID=${apiKey}&units=metric`)\n        .then(response => {\n          if (response.ok) { return response }\n          throw Error(\"błędny link\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          if (i === 0) {\n            let newcity = this.state.city1\n            newcity.temp = data.main.temp;\n            newcity.press = data.main.pressure;\n            newcity.wind = data.wind.speed;\n            // console.log(newcity);\n            this.setState({\n              city1: newcity\n            })\n          }\n          if (i === 1) {\n            let newcity = this.state.city2\n            newcity.temp = data.main.temp;\n            newcity.press = data.main.pressure;\n            newcity.wind = data.wind.speed;\n            // console.log(newcity);\n            this.setState({\n              city2: newcity\n            })\n          }\n          if (i === 2) {\n            let newcity = this.state.city3\n            newcity.temp = data.main.temp;\n            newcity.press = data.main.pressure;\n            newcity.wind = data.wind.speed;\n            // console.log(newcity);\n            this.setState({\n              city3: newcity\n            })\n          }\n        })\n        .catch(err => console.log(err))\n    }\n  }\n  render() {\n    console.log(this.state.length);\n    return (\n      <>\n        <h1>Actual weather</h1>\n        <div className=\"app\">\n          <Weather data={this.state.city1} />\n          <Weather data={this.state.city2} />\n          <Weather data={this.state.city3} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}